version: "3.8"
services:
  mongo:
    build:
      dockerfile: ./apps/database/Dockerfile
      args:
        MONGO_VERSION: 6
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=
      - MONGO_INITDB_ROOT_PASSWORD=
      - MONGO_INITDB_DATABASE=
      - MONGO_REPLICA_HOST=
      - MONGO_REPLICA_PORT=27018
      - MONGO_COMMAND=mongosh
      - INIT_REPL_CMD=3
    volumes:
      - ./apps/database/data:/data/db
    ports:
      - 27018:27018
    networks:
      - backend
    restart: always
    healthcheck:
      # Use "mongo" instead of "mongosh" before v5.0
      test:
        [
          "CMD",
          "mongosh",
          "admin",
          "--port",
          "27018",
          "--eval",
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 2s
      retries: 20

  # prisma-studio:
  #   build:
  #     context: .
  #     target: prisma-runner
  #     dockerfile: ./apps/server/Dockerfile
  #   container_name: prisma-studio
  #   restart: unless-stopped
  #   env_file: ./apps/server/.env.docker
  #   environment:
  #     - DATABASE_USERNAME=
  #     - DATABASE_PASSWORD=
  #     - DATABASE_NAME=
  #   ports:
  #     - 5555:5555
  #   networks:
  #     - backend
  #   depends_on:
  #     - mongo
  #   links:
  #     - mongo

  server:
    build:
      context: .
      target: runner
      dockerfile: ./apps/server/Dockerfile
    container_name: server
    restart: unless-stopped
    env_file: ./apps/server/.env.docker
    environment:
      - NODE_ENV=production
      - DATABASE_USERNAME=
      - DATABASE_PASSWORD=
      - DATABASE_NAME=
      - DATABASE_URL=
      - JWT_SECRET_KEY=
      - JWT_REFRESH_TOKEN_KEY=
    volumes:
      - ./apps/server/public:/app/apps/server/public
      - /app/node_modules
      - /app/apps/server/node_modules

    ports:
      - 30000:3000
    networks:
      - client
      - backend
    depends_on:
      - mongo
    links:
      - mongo

  # admin:
  #   build:
  #     context: .
  #     target: runner
  #     dockerfile: ./apps/admin/Dockerfile
  #   container_name: admin
  #   restart: unless-stopped
  #   stdin_open: true
  #   tty: true
  #   env_file: ./apps/admin/.env.example
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_USERNAME=
  #     - DATABASE_PASSWORD=
  #   volumes:
  #     - ./apps/admin/public:/app/apps/admin/public
  #   ports:
  #     - "30002:3002"
  #   networks:
  #     - client
  #     - backend

  client:
    build:
      context: .
      target: runner
      dockerfile: ./apps/client/Dockerfile
    container_name: client
    restart: unless-stopped
    env_file: ./apps/client/.env.docker
    stdin_open: true
    tty: true
    volumes:
      - ./apps/client/public:/app/apps/client/public
      - /app/node_modules
      - /app/apps/client/node_modules
    environment:
      - NODE_ENV=production
      - DATABASE_USERNAME=
      - DATABASE_PASSWORD=
      - DATABASE_NAME=
      - DATABASE_URL=
      - NEXT_PUBLIC_TELEGRAM_TOKEN=
      - NEXT_PUBLIC_TELEGRAM_CHAT_ID=
      - NEXT_PUBLIC_TWANK_PROPERTY_ID=
      - NEXT_PUBLIC_TWANK_WIDGET_ID=
    ports:
      - "3001:3001"
    networks:
      - client
      - backend

networks:
  client:
    driver: bridge
  backend:
    driver: bridge

volumes:
  database:
    driver: local
